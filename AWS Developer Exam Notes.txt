IAM

* Essentially, IAM allows you to manage users and their level of access to the AWS console.It is important to understand IAM and how it works, both for the exam and for administrating a company's AWS account in real life.

* what does IAM gives you ?
	- Centralised control of your AWS account 
	- Shared access to your AWS account.
	- Granular permissions
	- Identity federation (including Active Directory, Facebook, Linkedin etc)
	- Multifactor Authentication
	- Provide temporary access for users/devices and servies where necessary.
	- Allows you to set up your own password rotation policy.
	- Integrates with many different AWS services
	- Supports PCI DSS Compliance.

*  API call used to obtain temporary security credentials when authenticating using Web Identity Federation is "AssumeRoleWithWebIdentity"

* The name of the API call to request temporary security credentials from the AWS platform when federating with Active Directory is "AssumeRoleWithSAML"

* When using active directory to authenticate to AWS following are the correct steps. 
		- The user navigates to ADFS webserver
		- The user enter in their single sign on credentials
		- The user's web browser receives a SAML assertion from the AD server
		- The user's browser then posts the SAML assertion to the AWS SAML end point for SAML and the AssumeRoleWithSAML API request is used to request temporary security credentials. 
		- The user is then able to access the AWS Console.

* The AWS sign-in endpoint for SAML is https://signin.aws.amazon.com/saml

* When using Web Identity Federation to allow a user to access an AWS service (such as an S3 bucket) following are the steps
		- A user authenticates with facebook first. 
		- They are then given an ID token by facebook. 
		- An API call called AssumeRoleWithWebIdentity is then used in conjunction with the ID token. 
		- A user is then granted temporary security credentials.

* The name of the service to allow users to use their social media account to gain temporary access to the AWS platform is "Web Identity Federation".

* Sessions
	- Allows temporary access to AWS accounts
	- Generated by Security Token Service (STS)
	- Obtained by calling
		- GetFederationToken
		- AssumeRole
		- AssumeRoleWithSAML
		- AssumeRoleWithWebIdentity

	- Session contains 4 elements
		- Access Key ID
		- Secret Access Key ID
		- Session Token
		- Expiration (has Min/Max/Default)
			- GetFederationToken : 15 mins/36 hrs/12 hrs
			- AssumeRole/AssumeRoleWithSAML/AssumeRoleWithWebIdentity : 15 mins/1 hr/1 hr
			

##################################################################################################################################################

EC2

* Termination protection is turned off by default, you must turn it on.
* On EBS-Backed instances, the default action is for the root EBS volume to be deleted when the instance is terminated.
* EBS root volumes of your DEFAULT AMIs cannot be encrypted.You can use a third party tool (eg Bit locker) to encrypt the root volume, or this can be done when creating AMIs in the AWS console or using the API.
* Additional volumes can be encrypted.	
* CLI Commands
	- AWS EC2 DESCRIBE-INSTANCES
	- AWS EC2 DESCRIBE-IMAGES
	- AWS EC2 RUN-INSTANCES
	- AWS EC2 START-INSTANCES (Do not confuse START-INSTANCES with RUN-INSTANCES)
* There is an instance type specific limit for every region. You can request amazon to increase the limit for your account. 
* There is an instance type specific limit for every region. You can request amazon to increase the limit for your account the intra region data transfer pricing applies.
* Alice launched an EC2 instance.  While installing the software, she had to restart the instance twice within the hour.  How many hours of usage is her account charged? Account will be charged for 1 hour as Restart is free
* If you want to monitor your application generated log files, OS generated log files across a fleet of EC2 instances for errors, warnings or any other messages of interest, you can use cloudwatch
* When you recover an EC2 instance using CloudWatch Alarm, Instance is moved to different physical host.Instance has same metadata including public IP Address.


##################################################################################################################################################

Security Group.

* All inbound traffic is blocked by default.
* All outbound traffic is allowed by default.
* Changes to security groups take effect immediately.
* You can have any number of EC2 instances within a security group.
* You can have multiple security groups attached to EC2 instances.
* Security groups are STATEFUL.If u create an inbound rule corresponding outbound rule is automatically created.
* You cannot block specific IP address using security groups instead use Network ACLs for the same.
* You can only specify allow rules but not deny rules in a security group.


##################################################################################################################################################

EBS 

* Commands to mount additional EBS volumes to EC2 instance

	* lsblk       							 // command to check wat volumes are attached and mounted to EC2.
	* mkfs -t ext4  /dev/xvdb               // Command to make a file system.
	* mkdir /acloudguru                    // Command to make a new directory named "acloudguru"
	* mount /dev/xvdb /acloudguru		  // Command to mount the device /dev/xvdb to mount point /acloudguru
	* lsblk								 // command to check wat volumes are attached and mounted to EC2.
	* cd /acloudguru                    // Command to go to directory /acloudguru 
	* echo "This is my file" > test.html // command to create a file named test.html     
	* umount /dev/xvdb                // command to unmount the device /dev/xvdb
	* cd /acloudguru                 // Command to go to directory /acloudguru
	* ls                            // Command to check the files in current location. test.html wont be visible as we have unmounted the device
	* cd /                         // Command to go to root directory
	* mount /dev/xvdb /acloudguru		  // Command to mount the device /dev/xvdb to mount point /acloudguru
	* cd /acloudguru
	* ls                         // now you can again see the file test.html

* EBS volumes can be changed on the fly (except for magnetic standard)
* Best practice to stop EC2 instance and then change the volume.
* You can change volume types by taking a snap shot and then using a snap shot to create a new volume.
* If you have change the volume on the fly you must wait for 6 hours before making another change.
* You can scale EBS volumes up only.
* Volumes must be in same AZ as that of the EC2 instances.
* 


##################################################################################################################################################

EFS (Elastic File System)

1. Amazon Elastic File System is File storage service for Amazon EC2.
2. EFS is easy to use and provides simple interface that allows u to create and configure file systems easily and quickly.
3. With EFS,storage capacity is elastic , growing and shrinking automatically as u add and remove files, so ur applications have the storage they need, when they need it.
4. We cannot mount one EBS volume to 2 or more EC2 instances , thats exactly what EFS allows us to do.
5. EFS supports Network File System version 4 (NFSv4) protocol.
6. You only pay for the storage u use (it means no pre provisioning is required) unlike EBS.
7. EFS can scale up to petabytes
8. EFS can support thousands of concurrent NFS connections.Amazon EFS supports one to thousands of Amazon EC2 instances connecting to a file system concurrently.
9. Data is stored across multiple AZs within a region.
10. EFS is block based storge as opposed to object based storage like the one in S3.We can put files in EFS and share it with other EC2 instances.
11. EFS has read after write consistency just like S3. 	
12. EFS usecase is, it is used as a file server.it acts as a shared repository whose files are accessed  by multiple EC2s.
13. EC2 instances on which the EFS is to be mounted must be in same security group as EFS.	

#################################################################################################################################################

AWS SDKs

* URL - https://aws.amazon.com/tools/
* Launguages supported
	* Android,iOS,Javascript(Browser)
	* Java
	* .Net
	* Node.js
	* PHP
	* Python
	* Ruby
	* Go
	* C++
* Default Region
	- US-EAST-1 is the default region for SDKs
	- Some SDks have default regions (eg Java)	
	- Some do not (eg Node.js)





* A HTTP 4XX code means , There has been a client side error.
* A HTTP 5XX code means , There has been a server side error.
* A HTTP 3XX code means, There has been a redirection.
* You can have multiple SSL certificates on an Elastic Load Balancer
* The individual objects in S3 do not inherit it's bucket's tag.
* The largest size file you can transfer to S3 using a PUT operation is 5GB after that you must use multipart uploads.

*************************************************************************************************************************************************

Databases

* Relational Databases under RDS
	- SQL server
	- Oracle
	- MySQL Server
	- PostgreSQL
	- Aurora
	- MariaDB

* Non Relational Databases
	- Database 
		- Collection = Table
		- Document = Row
		- Key Value Pairs = Fields

* What is Data Warehousing
	- Used for BI.Tools like Congos, Jaspersoft, SQL Server Reporting Services, Oracle Hyperion, SAP Netweaver.
	- Used to pull in very large and complex datasets.Usually used by management to do queries on data (eg current performance vs targets etc.)



* DynamoDB
	- Amazon DynamoDB is fast and flexible NoSQL database service for all applications that need consistent, single digit latency at any scale.It is a fully managed database and supports both document and key value data models.Its flexile data model and reliable performance make it a great fit for mobile,web,gaming ,ad-tech,IOT and many other applications.
	- DynamoDB is always stored on SSD storage.
	- DynamoDB is spread across 3 geographically distinct data centres.
	- DynamoDB has eventual consistent reads by default.
		- Consistancy across all copies of data is usually reached within a second.Repeating a read after a short time should return the updated data. (This is a best model for Read Performance)	
	- DynamoDB also supports Strongly Consistent Reads
		- A strongly consistent read returns a result that reflect all writes that received a succesful response prior to the read.	
	- Basics
		* Tables 
		* Items (Think a row of data in table)
		* Attributes (Think of a cloumn of data in table)
		* Eg. Suppose u have a "Students" table.It is a nested table
			{
				"uniqueid":"1212",
				"firstname":"Allan",
				"surname":"Brown",
				"Address":{
							"Number":"15",
							"Street":"River Bed"	
							}
			}
		* DynamoDB Supports nesting upto 32 levels.

	- Primary Keys
		* Two types of primary keys available.
			# Single Attribute (Think of uniuqe ID) - Partition Key (Hash Key) composed of one attribue.
				* DynamoDB uses partition key's value as input to an internal hash function.The output from the hash function determines the partition (this is simply the physical location in which the data is stored)
				* No 2 items in a table can have the same partition key value.
			# Composite (think unique ID and date range) - Partition Key & Sort Key (Hash & Range) composed of two attributes.
				* DynamoDB uses the partition key's value as input to an internal hash function.The output from the hash function determines the partition (this is simply the physical location in which the data is stored) 
				* Two items can have the same partition key but they must have a different sort key.
				* All items with the same partition key are stored together, in sorted order by sort key value.
	- Indexes
		* Local Secondary Index
			# Has same partition key, different sort key.
			# Can only be created when creating a table.They cannot be removed or modified later.
			# you can have upto 5 Local Secondary Indexes per table
			# You can request strongly consistent Query or Scan actions on a table or a local secondary index incase you dont want eventual consistency
		* Global Secondary Inde
			# Has different partition key and different sort key
			# Can be created at table creation or added later.
			# you can have upto 5 Global Secondary Indexes per table
			# Global secondary indexes only support eventual consistency.
			# Global secondary indexes are backfilled.During backfilling, the table remains available. However, the index is not ready until its Backfilling attribute changes from true to false.You can use the DescribeTable action to view this attribute.

	- Streams
		* Used to capture any kind of modification of the DynamoDB tables.
		* If a new item is added to the table, the stream captures an image of the entire item, including all of it's attributes.
		* If an item is updated, the stream captures the "before" and "after" image of any attributes that were modified in the item.
		* If an image is deleted from the table, the stream captures an image of the entire item before it was deleted.
		* DynamoDB streams are stored for 24 hours.

	- DynamoDB Query
		* A query operation finds item in a table using primary key attribute values.You must provide a partition attribute name and a distinct value to search for.
		* You can optionally provide a sort key attribute name and value, and use a comparison operator to refine the search results.
		* By default, a query returns all of the data attributes for items with the specified primary key(s), however, you can use the "ProjectionExpression" parameter so that the query only returns some of the attributes, rather than all of them.	
		* Query results are always sorted by the sort key.If the data type of the sort key is a number, the results are returned in numeric order.Otherwise the results are returned in order of ASCII character code values.By default, the sort order is ascending.To reverse the order, set the "ScanIndexForward" parameter to false.
		* By default a query is eventually consistent but can be changed to be strongly consistent.

	- DynamoDB Scan
		* A Scan operation examines every item in the table.By default, a scan returns all of the data attributes for every item.However, you can use the "ProjectExpression" parameter so that the scan only returns some of the attributes, rather than all of them.

	- Query vs Scan
		* Generally a query operation is more efficient than a scan operation.
		* A scan operations always scans the entire table, then filters out values to provide the desired result, essentially adding the extra step of removing data from the result set.Avoid using a scan operation on a large table with a filter that removes many results, id possible.Also, as a table grows, the scan operation slows.The scan operation examines every item for the requested values, and can use up the provisioned throughput for a large table in a single operation.
		* For quicker response times, design your tables in a way that can use the Query, Get, GetBatchItem APIs instead.Alternatively, design ur applications to use scan operations in a way that minimizes the impact on your table's request rate.

	- Provisioned Throughput
		* Unit of Read Provisioned Throughput
			# All reads are rounded upto the increments of 4KB
			# Eventually consistent reads (defaults) consist of 2 reads per second.
			# Strongly consistent reads consist of 1 read per second.
		* Unit of Write Provisioned Throughput
			# All writes are 1 KB
			# All writes consist of 1 write per second.

		* The Magic Formula
			@ (Size of Read rounded to nearest 4KB chunk / 4KB) * no of items = read throughput
			@ Divide by 2 if eventually consistent.

	- Scan operation performs eventually consistent reads by default, and it can return up to 1 MB (one page) of data. Therefore, a single Scan request can consume (1 MB or 1024 KB  page size / 4 KB item size) / 2 (eventually consistent reads) = 128 read operations. If you were to request strongly consistent reads instead, the Scan operation would consume twice as much provisioned throughput—256 read operations. 
				
	- If you exceed you maximum allowed provisioned throughput for a table or for one or more global secondary indexes then DynamoDB returns 400 http status code i.e ProvisionedThroughputExceededException

	- Web Identity Providers
		* Steps taken to authenticate
			# User authenticates with ID provider (such as facebook)
			# They are passed a token by their ID provider.
			# Your code calls the AssumeRoleWithWebIdentity API and provide the providers token and specifies the ARN for the IAM Role.
			# App can now access DynamoDB from between 15 minutes to 1 hour (default is 1 hour)

	- Conditional Writes
		* For Eg If item = $10 then update to $12
		* Note that conditional writes are idempotent.This means that you can send the same conditional write request multiple times, but it ll have no further effect on the item after the first time DynamoDB performs the specified update.For example, suppose issue a request to update the price of a book item by 10%, with the expectation that the price is currently $20.However, before you get a response, a network error occurrs and you dont know whether you request was successfull or not.Because a conditional update is an idempotent operation, you can send the same request again and DynamoDB ll update the price only if the current price is still $20.	

	- Atomic Counters
		* DynamoDB supports atomic counters, where you can use the "UpdateItem" operation to increment or decrement the value of an existing attribute without interfering with other write requests.(All write requests are applied in the order in which they are received.) For example, a web application might want to maintain a counter per visitor to their site.In this case, the application would need to increment this counter regardless of its current value.
		* Atomic counter updates are not idempotent.This means that the counter ll increment each time you call UpdateItem.If you suspect that the previous request was unsuccessful, your application could retry the "UpdateItem" operation.However,This would risk updating the counter twice.This might be acceptable for a web site counter,as you can tolerate with slightly over or under figures.However, in a banking application, it would be safer to use a conditional update rather than an atomic counter.

	- Batch Operartions
		* If your application needs to read multiple items, you can use the "BatchGetItem" API. A single "BatchGetItem" request can retrieve upto 1 MB of data, which can contain as many as 100 items.In addition, a single BatchGetItem request can retrieve items from multiple tables.

	- DynamoDB is a non-relational NoSQL database, and does not support table joins. Instead, applications read data from one table at a time.
		
	Note - Read DynamoDB FAQs		

*************************************************************************************************************************************************

Elastic Bean Stalk
	* With Elastic BeanStalk, you can deploy, monitor and scale an application quickly.
	* It provides developers and end users with the ability to provision application infrastructure in an  almost transparent way.
	* If has highlhy abstract focus towards infrastructure, focusing on components and performance - not configuration and specifications.
	* It attempts to remove or significantly simplify infrastructure management, allowing applications to deployed into the infrastrucutre environments easily.
	* Beanstalk key Architecture Components
		- Applications are the high level strucutre in beanstalk.
		- Either your entire application is one Elastic BeanStalk application or Each logical component of your application, can be a Elastic BeanStalk application or an Elastic BeanStalk environment within an application.
		- Application can have multiple environments (Prod, Staging, Dev, V1, V2, V1.1 or functional type i.e frontend or backend)
		- Environments are either single instance or scalable.
		- Environments are either web server environmnts or worker environments.
		- Application versions are unique packages which represents versions of apps.
		- An application is uploaded to Elastic BeanStalk as an application bundle i.e .zip
		- Each 'application' can have many versions 1:M relationship
		- Application versions can be deployed to environments within an application.
	* Platforms Supported
		- Preconfigured
			- Nodejs
			- PHP
			- Python
			- Ruby
			- Tomcat
			- .Net(Windows/IIS)
			- Java
			- Go
			- Packer
		- Preconfigured - Docker
			- GlassFish
			- Go 
			- Python
		- Generic
			- Docker
			- Multi-Container Docker
	* Summary
		- You can have multiple versions of your applications
		- Your applications can be split into tiers (Web Tier/Application Tier/ Dataase Tier)
		- You can update your application.
		- You can update your configuration
		- Updates can be 1 instance at a time, a % of instances or an immutable update. 					
		- You pay for the resources that you use, but Elastic BeanStalk is free.
		- If Elastic Beanstalk creates your RDS database then it ll delete it when you delete your application.If not then the RDS instace stays.
		- Languages Supported
			* Apache TomCat for Java Applications
			* Apache HTTP server for PHP applications
			* Apache HTTP server for python applications
			* Nginx or Apache HTTP server for Node.js applications.
			* Passenger or Puma for Ruby applications
			* Microsoft IIS 7.5, 8.0 and 8.5 for .NET applications
			* Java SE
			* Docker
			* Go	 	

************************************************************************************************************************************************

Cloud Formation

	* Cloudformation allows you to take what was once traditional hardware infrastructure and convert it into code.
	* Cloud Formation gives developers and system administrators an easy way to create and manage a collection of related AWS resources, provisioning and updating then in orderly and predictable fashion.
	* You dont need to figure out the order for provisioning AWS services or the subtleties of making those dependencies work.CloudFormation takes care of that for you.
	* After the AWS resources are deployed, you can modify and update them in controlled and predictable way, in effect applying version control to your AWS infrastructure the same way you do with your software.
	* CloudFormation Stack vs Template
		- A CloudFormation Template is essentially an architectural diagram and CloudFormation Stack is the end result of the diagram (i.e what is actually provisioned)
		- You create,update and delete a collection of resources by creating, updating and  deleting stacks using CloudFormation Templates.
		- CloudFormation Templates are in JSON or YAML format.
	* Elements of a Template
		- Mandatory Elements
			* List of AWS resources and their associated configuration values.
			* Optional Elements 
				- The templates's file format and version number
				- Template Parameters : The input values that are supplied at stack creation time.Limit of 60
				- Output values : The output values that are required once the stack has finished building (Such as public address, ELB address etc.). Limit of 60
				- List of data tables : Used to look up static configuration values such as AMIs etc.
	* A Simple Template
		{
			"Resources":{
				"HelloBucket":{
					"Type":"AWS::S3::Bucket"
				}
			}
		}			
	* Output Data : You can use Fn:GetAtt to output data
	* Summary
		- By default the "automatic rollback on error" feature is enabled.
		- You are charged for errors.
		- CloudFormation is Free.
		- Stacks can wait for applications to be provisioned using the WaitCondition.
		- You can use Fn:GetAtt to output data
		- Route53 is completly supported.This includes creating new hosted zones or updating existing zones.
		- You can create A Records, Aliases etc.
		- IAM Role creation and Assingment is also supported.
			
	* AWS CloudFormation automatically tags Amazon EBS volumes and Amazon EC2 instances with the name of the AWS CloudFormation stack they are part of.	

	*  Can stack creation wait for my application to start up - AWS CloudFormation provides a WaitCondition resource that acts as a barrier, blocking the creation of other resources until a completion signal is received from an external source such as your application, or management system.

	* AWS CloudFormation allows you to define deletion policies for resources in the template. You can specify that snapshots be created for Amazon EBS volumes or Amazon RDS database instances before they are deleted. You can also specify that a resource should be preserved and not deleted when the stack is deleted. This is useful for preserving Amazon S3 buckets when the stack is deleted.

	* You can use AWS CloudFormation to modify and update the resources in your existing stacks in a controlled and predictable way. By using templates to manage your stack changes, you have the ability to apply version control to your AWS infrastructure just as you do with the software running on it.

	* CloudFormation supports creating VPCs, Subnets, Gateways, Route Tables and Network ACLs as well as creating resources such as Elastic IPs, Amazon EC2 Instances, EC2 Security Groups, Auto Scaling Groups, Elastic Load Balancers, Amazon RDS Database Instances and Amazon RDS Security Groups in a VPC.

	* There are no limits to the number of templates. Each AWS CloudFormation account is limited to a maximum of 200 stacks. Complete our request for a higher limit here, and we will respond to your request within two business days.

	* Mapping in cloudFormation 

		{
			  "AWSTemplateFormatVersion" : "2010-09-09",

			  "Mappings" : {
			    "RegionMap" : {
			      "us-east-1" : { "32" : "ami-6411e20d", "64" : "ami-7a11e213" },
			      "us-west-1" : { "32" : "ami-c9c7978c", "64" : "ami-cfc7978a" },
			      "eu-west-1" : { "32" : "ami-37c2f643", "64" : "ami-31c2f645" },
			      "ap-southeast-1" : { "32" : "ami-66f28c34", "64" : "ami-60f28c32" },
			      "ap-northeast-1" : { "32" : "ami-9c03a89d", "64" : "ami-a003a8a1" }
			    }
			  },

			  "Resources" : {
			    "myEC2Instance" : {
			      "Type" : "AWS::EC2::Instance",
			      "Properties" : {
			        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "32"]},
			        "InstanceType" : "m1.small"
			      }
			    }
			  }
		}

	* Parameters Example
		"Parameters" : {
						  "InstanceTypeParameter" : {
						    "Type" : "String",
						    "Default" : "t2.micro",
						    "AllowedValues" : ["t2.micro", "m1.small", "m1.large"],
						    "Description" : "Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
						  }
						}


		"Ec2Instance" : {
						  "Type" : "AWS::EC2::Instance",
						  "Properties" : {
						    "InstanceType" : { "Ref" : "InstanceTypeParameter" },
						    "ImageId" : "ami-2f726546"
						  }
						}

		- For sensitive parameter values (such as passwords), set the NoEcho property to true. That way, whenever anyone describes your stack, the parameter value is shown as asterisks (*****).									

************************************************************************************************************************************************

* In Identity Access Management, using SAML (Security Assertion Markup Language 2.0) you can give your federated users single sign-on (SSO) access to the AWS Management Console.
* When you create new subnets within a custom VPC, by default they can communicate with each other, across availability zones.
* It is possible to transfer a reserved instance from one Availability Zone to another but you cannot transfer it from one region to another.
* You can have multiple SSL certificates (for multiple domain names) on a single Elastic Load Balancer.
* Which of these AWS services do not use key value pairs - Route 53
* If you make an AMI public, this AMI is not immediately available across all regions, by default.You can copy the the AMI to a new region.



* Your application uses Elastic Load Balancer and has six EC2 instances registered with three each in Availability Zone A and Availability Zone B.  

You want to benchmark a newer generation high performance instance with your application that will allow you to serve with fewer instances.  You removed the 3 registered instances in Availability Zone A and replaced with a single new generation instance.

When you were doing the load test, you notice that only 25% of the traffic is reaching the new instance.  You want to ensure 50% of the traffic reaches the new instance. What could you do to accomplish this?

Ans - If cross-zone load balancing is enabled, the load balancer distributes traffic evenly across all registered instances in all enabled Availability Zones. In this case Availability Zone A has one instance and B has three instances. Each instance is receiving 25% of the traffic. When cross zone load balancing is disabled, each availability zone would get 50% of the traffic.


* Only Classic Load Balancer supports TCP layer load balancing

* DynamoDB uses optimistic concurrency control